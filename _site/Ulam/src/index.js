// Generated by CoffeeScript 2.7.0
(function() {
  var canvas, ct, ctx, get, h, hsl, i, imageData, isPrime, j, m, neighbor, nums, o, p, pf, primeFactors, putData, q, r, ref, ref1, ref2, ref3, w, xy;

canvas = document.getElementById('canvas');

var iterations = 200; // num of loops

canvas.width  = iterations
canvas.height = iterations

ctx = canvas.getContext('2d');

imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);

  neighbor = function(n, dir, w, h) {
    switch (dir) {
      case 'L':
        return n - 1;
      case 'R':
        return n + 1;
      case 'U':
        return n - w;
      case 'D':
        return n + w;
      default:
        return alert('direction??');
    }
  };

  primeFactors = function(n) {
    var divisor, factors;
    factors = [];
    divisor = 2;
    while (n >= 2) {
      if (n % divisor === 0) {
        factors.push(divisor);
        n = n / divisor;
      } else {
        divisor++;
      }
    }
    return factors;
  };

  // HSL -> RGB
  hsl = function(h, s, l) {
    var a, f, k;
    s /= 100;
    l /= 100;
    k = function(n) {
      return (n + h / 30) % 12;
    };
    a = s * Math.min(l, 1 - l);
    f = function(n) {
      return l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
    };
    return [255 * f(0), 255 * f(8), 255 * f(4)];
  };

  // filter array k for f
	// handy for if you have a list of factors
	// and want to pull out specific ones
  get = function(k, f) {
    var fnc;
    return k.filter(fnc = function(a) {
      return a === f;
    });
  };

  isPrime = function(num) {
    var i;
    if (num < 2) {
      return false;
    }
    i = 2;
    while (i < num) {
      if (num % i === 0) {
        return false;
      }
      i++;
    }
    return true;
  };

  putData = function(xy, j, k) {
    var f2, rgb;
    //  for h in [1..Math.ceil(k.length/2)]
    //    facts['factOf' + h] = get(k,h).length
    /*
      for h of globalPrimes
        if globalPrimes[h]>0 then break
    */
    //f2 = get(k, 2).length < 2;
    rgb = hsl(0, 50, 10*(k.length)); // this is the line to play with
    imageData.data[xy * 4] = rgb[0];
    imageData.data[xy * 4 + 1] = rgb[1];
    imageData.data[xy * 4 + 2] = rgb[2];
    return imageData.data[xy * 4 + 3] = 255; // alpha
  };

  nums = canvas.width * canvas.height;


  // allPrimes = primeFactorsTo(nums)
  /*
  globalPrimes = []
  for n in [2...nums/2]
    if isPrime(n) then globalPrimes.push(n)
  for h of globalPrimes
    console.log globalPrimes[h]
    if globalPrimes[h]>10 then break
  */

  w = canvas.width;
  h = canvas.height;

  xy = w * h / 2 + w / 2; // start at mid

  ct = 0;

  for (j = m = 1; m <= iterations; j = m += 2) {
    for (i = o = 1, ref = j; (1 <= ref ? o <= ref : o >= ref); i = 1 <= ref ? ++o : --o) {
      ct++;
      xy = neighbor(xy, 'R', w, h);
      pf = primeFactors(ct);
      putData(xy, ct, pf);
    }
    for (i = p = 1, ref1 = j; (1 <= ref1 ? p <= ref1 : p >= ref1); i = 1 <= ref1 ? ++p : --p) {
      ct++;
      xy = neighbor(xy, 'D', w, h);
      pf = primeFactors(ct);
      putData(xy, ct, pf);
    }
    for (i = q = 1, ref2 = j + 1; (1 <= ref2 ? q <= ref2 : q >= ref2); i = 1 <= ref2 ? ++q : --q) {
      ct++;
      xy = neighbor(xy, 'L', w, h);
      pf = primeFactors(ct);
      putData(xy, ct, pf);
    }
    for (i = r = 1, ref3 = j + 1; (1 <= ref3 ? r <= ref3 : r >= ref3); i = 1 <= ref3 ? ++r : --r) {
      ct++;
      xy = neighbor(xy, 'U', w, h);
      pf = primeFactors(ct);
      putData(xy, ct, pf);
    }
  }

  ctx.putImageData(imageData, 0, 0);

}).call(this);
